@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudStack Justify="Justify.Center" Spacing="2" Style="padding: 8px;">
            <MudText Typo="Typo.h4">Create a new Session</MudText>
            <MudAutocomplete T="string" ResetValueOnEmptyText="true" Clearable="true" ValueChanged="DjChanged" Required="true" Variant="Variant.Outlined" Label="Select a DJ" SearchFunc="@DjSearch"/>
            <MudSelect Required="true" @bind-Value="@_selectedStage" Variant="Variant.Outlined" Label="Select a Stage" Clearable="true">
                @foreach (var item in Stages)
                {
                    <MudSelectItem Value="@item.id">@item.Name</MudSelectItem>
                }
            </MudSelect>
            <MudGrid>
                <MudItem xs="6">
                    <MudDatePicker @bind-Date="@_startDate" Editable="true" Required="true" Variant="Variant.Outlined" Clearable="true" Label="Select a start date"/>
                </MudItem>
                <MudItem xs="6">
                    <MudTimePicker @bind-Time="@_startTime" Editable="true" Required="true" Label="Select a start time" Variant="Variant.Outlined" Clearable="true"/>
                </MudItem>
                <MudItem xs="6">
                    <MudDatePicker @bind-Date="@_endDate" Editable="true" Required="true" Variant="Variant.Outlined" Clearable="true" Label="Select a end date"/>
                </MudItem>
                <MudItem xs="6">
                    <MudTimePicker @bind-Time="@_endTime" Editable="true" Required="true" Label="Select a end time" Clearable="true" Variant="Variant.Outlined"/>
                </MudItem>
            </MudGrid>
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public List<Dj> Djs { get; set; }

    [Parameter]
    public List<Stage> Stages { get; set; }
    
    [Parameter]
    public int PreSelectedStage { get; set; } = -1;

    private int _selectedDj;
    private int _selectedStage;
    private DateTime? _startDate;
    private DateTime? _endDate;
    private TimeSpan? _startTime;
    private TimeSpan? _endTime;

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender && PreSelectedStage >= 0) return;
        _selectedStage = PreSelectedStage;
        StateHasChanged();
    }

    private void Submit()
    {
        if (_endDate == null || _startDate == null || _startTime == null || _endTime == null || _selectedDj == 0 || _selectedStage == 0 || _startDate > _endDate)
        {
            Snackbar.Add("Please fill in all fields correctly", Severity.Error);
            return;
        }
        
        var session = new Session
        {
            DJId = _selectedDj,
            StageId = _selectedStage,
            StartTime = _startDate.Value.Date + _startTime.Value,
            EndTime = _endDate.Value.Date + _endTime.Value
        };
        MudDialog.Close(DialogResult.Ok(session));
    }
    void Cancel() => MudDialog.Cancel();

    private Task<IEnumerable<string>> DjSearch(string arg)
    {
        return Task.FromResult(string.IsNullOrEmpty(arg) ? Djs.Select(x => x.Name) : Djs.Where(x => x.Name.Contains(arg, StringComparison.InvariantCultureIgnoreCase)).Select(x => x.Name));
    }

    private void DjChanged(string obj)
    {
        if (string.IsNullOrEmpty(obj)) return;
        _selectedDj = Djs.First(x => x.Name == obj).id;
    }
}